{
    "collab_server" : "",
    "contents" : "# DAG is constructed according to the following relations :\n# \n#  DAYTIME_{t+1} ~ DAYTIME_{t} (1)\n#  ACTION_{t} ~ GLUCOSE_{t} + ACTION_{t} (2)\n#  GLUCOSE_{t+1} | GLUCOSE_{t} + ACTION_{t} + DAYTIME_{t} (3)\n\n\n#' @title building DAG (Directed Acyclic Graph) based on dataset\nconstruct_dag_from_data <- function(){\n  \n  # construct dag\n  dag <- list()\n  \n  # construct sample, arc 1 | multinomial distribution\n  dag$fit_model_1 <- prop.table(table('daytime_0' = tm_$daytime_0, 'daytime_1' = tm_$daytime_1), 1)\n  dag$sampler_1 <- function(daytime_0, prob_mat = dag$fit_model_1){\n    # extract probability distribution\n    index <- which(daytime_0 == levels_daytime_)\n    prob <- as.numeric(prob_mat[index,])\n    # sample over multinomial\n    rand <- base::sample(x = levels_daytime_, size = 1, prob = prob)\n    # return formatted version\n    return(factor(x = rand, levels = levels_daytime_))\n  }\n  \n  # construct sample, arc 2 | logistic model\n  dag$fit_model_2 <- multinom(formula = action_0 ~ glucose_0 + daytime_0, data = tm_, family = 'multinomial', verbose = FALSE)\n  dag$summary_model_2 <- summary(dag$fit_model_2)\n  dag$sampler_2 <- function(glucose_0, daytime_0,\n                            mc = dag$summary_model_2$coefficients,\n                            si = NULL){\n    # compute scalar product X\\beta\n    log_proba <- mc[,1] + mc[,2]*glucose_0\n    index <- which(daytime_0 == levels_daytime_)\n    if(index > 1) log_proba <- log_proba + mc[,2 - 1 + index]\n    # add error and apply logit function with 0.5 threshold\n    proba <- c(1, exp(as.numeric(log_proba)))\n    rand <- base::sample(x = levels_action_, size = 1, prob = proba)\n    # return formatted version\n    return(rand)\n  }\n  \n  # construct sample, arc 3 | \n  dag$fit_model_3 <- lm(formula = glucose_1 ~ glucose_0 + daytime_1 + action_0, data = tm_)\n  dag$sampler_3 <- function(glucose_0, daytime_1, action_0, \n                            mc = as.numeric(dag$fit_model_3$coefficients), \n                            si = sqrt(mean((dag$fit_model_3$residuals)^2))){\n    # compute scalar product X\\beta\n    rand <- mc[1] + mc[2]*glucose_0\n    index_daytime <- which(daytime_1 == levels_daytime_)\n    if(index_daytime > 1) rand <- rand + mc[2 + index_daytime - 1]\n    index_action <- action_0\n    if(length(action_0)==0) stop('length action 0 is 0')\n    if(index_action > 1){\n      rand <- rand + mc[2 + length(levels_daytime_)-1 + index_action - 1]\n    }\n    # add gaussian noise\n    rand <- rand + rnorm(n = 1, mean = 0, sd = si)\n    # return truncated observation\n    return(min(500, max(30, rand)))\n  }\n  \n  return(dag)\n  \n}",
    "created" : 1549189510764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3496085709",
    "id" : "D99CD57D",
    "lastKnownWriteTime" : 1549188654,
    "last_content_update" : 1549188654,
    "path" : "~/Documents/kdd_2019_diabetes/kdd_diabetes/construct_dag_from_data.R",
    "project_path" : "construct_dag_from_data.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}