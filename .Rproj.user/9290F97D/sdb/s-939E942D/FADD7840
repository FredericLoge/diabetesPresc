{
    "collab_server" : "",
    "contents" : "set.seed(1234)\nss <- simulate_dataset(N = 2000, Ti = 200, reco_mat = m4$qsa)\nna_indexes <- which(rowSums(is.na(ss))>0)\nNp <- c(10, 25, 50)\ngamma_ <- 0.80\nresult_wm0 <- list()\nresult_wm1 <- list()\nnbe <- 10\nk <- 0\nfor(i in 3){\n  siz <- Np[i]\n  for(j in 1:nbe){\n    k <- k+1\n    in_samp <- floor(seq(1, nrow(ss), length.out = 2000))\n    in_samp <- sample(x = in_samp[-length(in_samp)], size = siz)\n    in_samp <- unlist(sapply(in_samp, function(i) i+1:Ti, simplify = FALSE))\n    ss_samp <- ss[in_samp,]\n    wm0 <- compute_world_model(tm_samp = ss_samp, index_reward_on_next_state = TRUE)\n    wm1 <- compute_kernelized_world_model(tm_samp = ss_samp, use_kernel_for_rew = FALSE)\n    dp1_wm0 <- dynamic_programming(tme = wm0$tme, rew = wm0$rew, adj = wm0$adj)\n    dp1_wm1 <- dynamic_programming(tme = wm1$tme, rew = wm1$rew, adj = wm1$adj)\n    eval_wm0 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm0[[1]])\n    eval_wm1 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm1[[1]])\n    result_wm0[[k]] <- list('siz' = siz, 'qsa' = dp1_wm0[[1]], 'vec' = eval_wm0)\n    result_wm1[[k]] <- list('siz' = siz, 'qsa' = dp1_wm1[[1]], 'vec' = eval_wm1)\n  }\n}\n\nk <- length(result_wm0)+1\nss_samp <- ss\nwm0 <- compute_world_model(tm_samp = ss_samp, index_reward_on_next_state = TRUE)\nwm1 <- compute_kernelized_world_model(tm_samp = ss_samp, use_kernel_for_rew = FALSE)\ndp1_wm0 <- dynamic_programming(tme = wm0$tme, rew = wm0$rew, adj = wm0$adj)\ndp1_wm1 <- dynamic_programming(tme = wm1$tme, rew = wm1$rew, adj = wm1$adj)\neval_wm0 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm0[[1]])\neval_wm1 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm1[[1]])\nresult_wm0[[k]] <- list('siz' = nrow(ss), 'qsa' = dp1_wm0[[1]], 'vec' = eval_wm0)\nresult_wm1[[k]] <- list('siz' = nrow(ss), 'qsa' = dp1_wm1[[1]], 'vec' = eval_wm1)\n\nres_wm0 <- t(sapply(result_wm0, function(x) c(x$siz, mean(x$vec), median(x$vec), var(x$vec))))\nres_wm0 <- data.frame(res_wm0)\ncolnames(res_wm0) <- c('siz', 'mean', 'median', 'var')\nres_wm0$model <- 'classic'\n\nres_wm1 <- t(sapply(result_wm1, function(x) c(x$siz, mean(x$vec), median(x$vec), var(x$vec))))\nres_wm1 <- data.frame(res_wm1)\ncolnames(res_wm1) <- c('siz', 'mean', 'median', 'var')\nres_wm1$model <- 'kernel'\n\nresres <- rbind.data.frame(res_wm0, res_wm1)\nresres$siz[resres$siz==398000] <- 2000\nggplot(data = resres) +\n  geom_boxplot(mapping = aes(x=factor(model), y=mean, fill=factor(siz))) +\n  ggtitle(label = 'Cumulative discounted rewards on simulated data, \\n following previously optimized strategies') +\n  xlab('Estimation method') +\n  ylab('Cumulative\\n discounted\\n reward') +\n  labs('fill' = 'Sample sizes') +\n  theme(\n    text = element_text(size = 10),\n    title = element_text(size = 15),\n    axis.title.x = element_text(size = 15, margin = margin(m,m,m,m)),\n    axis.title.y = element_text(size = 15, hjust = 1, angle = 0)\n  )\n\n# rem2 <- get_state(ss_samp$daytime_0, ss_samp$glucose_0)\n# rem <- apply(ss_samp[,c(\"daytime_0\", \"glucose_0\")], 1, function(x) get_state(daytime_0 = x[1], glucose_0 = x[2]))\n# rem2[998]\n\n# evaluate a policy encoded in a vector with state to single action assigment\nevaluate_reco <- function(reco_mat, nb_experiments, length_traj){\n  v <- replicate(nb_experiments, {\n    simu <- simulate_dataset(N = 1, Ti = length_traj, reco_mat = reco_mat, e_greedy = FALSE)\n    simu$reward <- reward(simu$glucose_1)\n    sum((gamma_)^{1:(length_traj-1) - 1} * simu$reward)\n  })\n}\n\n##\ncomplete_wm0 <- compute_world_model(tm_samp = ss, index_reward_on_next_state = TRUE)\nimage(as.matrix(complete_wm0$tme[,-(1:2)]))\nimage(as.matrix(wm0$tme[,-(1:2)]))\nimage(as.matrix(wm1$tme[,-(1:2)]))\n\n\nwm0 <- compute_world_model(tm_samp = ss, index_reward_on_next_state = TRUE)\nwm1 <- compute_kernelized_world_model(tm_samp = ss, use_kernel_for_rew = FALSE)\nimage(as.matrix(wm0$tme[,-(1:2)]))\nimage(as.matrix(wm1$tme[,-(1:2)]))\ndp1_wm0 <- dynamic_programming(tme = wm0$tme, rew = wm0$rew, adj = wm0$adj)\ndp1_wm1 <- dynamic_programming(tme = wm1$tme, rew = wm1$rew, adj = wm1$adj)\neval_wm0 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm0[[1]])\neval_wm1 <- evaluate_reco(nb_experiments = 100, length_traj = 20, reco_mat = dp1_wm1[[1]])\n\n",
    "created" : 1549192164131.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4205741333",
    "id" : "FADD7840",
    "lastKnownWriteTime" : 1549208383,
    "last_content_update" : 1549208383661,
    "path" : "~/Documents/kdd_2019_diabetes/kdd_diabetes/eval_impact_structure.R",
    "project_path" : "eval_impact_structure.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}